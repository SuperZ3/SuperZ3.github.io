import{c as n}from"./app.9dca4400.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";var a="/assets/fiber.8af9f87f.png";const p={},t=n(`<h1 id="react-\u6267\u884C\u8FC7\u7A0B" tabindex="-1"><a class="header-anchor" href="#react-\u6267\u884C\u8FC7\u7A0B" aria-hidden="true">#</a> react \u6267\u884C\u8FC7\u7A0B</h1><p>react 16 \u5F15\u5165\u4E86 Fiber\uFF0C\u53EF\u4EE5\u8BA9\u6211\u4EEC\u5728\u9012\u5F52\u6302\u8F7D\u5B50\u8282\u70B9\u65F6\u4E2D\u65AD\u9012\u5F52\u8FC7\u7A0B\uFF0C\u51CF\u5C11\u9875\u9762\u5361\u987F\u7684\u51FA\u73B0</p><p>\u5F53\u521B\u5EFA\u7EC4\u4EF6\u65F6\uFF0C\u4E0D\u518D\u9700\u8981\u663E\u793A\u8C03\u7528 React.createElement\uFF0CReact \u4F1A\u81EA\u52A8\u5E2E\u6211\u4EEC\u521B\u5EFA JSX \u5BF9\u8C61</p><p>render \u8FC7\u7A0B\u5C31\u662F\u9012\u5F52\u904D\u5386\u5B50\u7EC4\u4EF6\u521B\u5EFA\u5143\u7D20\u5E76\u63D2\u5165\u9875\u9762\uFF0C\u4E0B\u9762\u662F\u7B80\u5316\u4EE3\u7801</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    wipRoot <span class="token operator">=</span> <span class="token punctuation">{</span>
        stateNode<span class="token operator">:</span> container<span class="token punctuation">,</span>
        props<span class="token operator">:</span> <span class="token punctuation">{</span>
            children<span class="token operator">:</span> vnode
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    nextUnitWork <span class="token operator">=</span> wipRoot<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Fiber \u662F React 16 \u65B0\u5F15\u5165\u7684\uFF0C\u6211\u4EEC\u53EF\u4EE5\u5C06\u5B83\u770B\u4F5C\u6570\u636E\u7ED3\u6784\uFF0C\u53EF\u4EE5\u6839\u636E Fiber \u521B\u5EFA\u865A\u62DF\u8282\u70B9 VNode\uFF0C\u4EA6\u53EF\u4EE5\u770B\u6210\u4E00\u79CD\u6267\u884C\u673A\u5236\uFF0C\u5F53\u6D4F\u89C8\u5668\u6709\u7A7A\u65F6\u5C06\u4ECE\u4E0A\u6B21\u7684 Fiber \u7EE7\u7EED\u6267\u884C</p><h2 id="reconciler" tabindex="-1"><a class="header-anchor" href="#reconciler" aria-hidden="true">#</a> Reconciler</h2><p>\u6211\u4EEC\u5229\u7528 requestIdleCallback \u4EE3\u66FF Scheduler\uFF0C\u5F53\u6D4F\u89C8\u6709\u7A7A\u95F2\u65F6\uFF0C\u5F00\u59CB Reconciler \u8FC7\u7A0B\uFF0C\u534F\u8C03\u662F\u6839\u636E Fiber \u6765\u7684\uFF0C\u6BCF\u6B21\u6D4F\u89C8\u5668\u6709\u7A7A\u6211\u4EEC\u5C31\u4ECE\u4E0A\u6B21\u6267\u884C\u7684 Fiber \u5F00\u59CB\u7EE7\u7EED\u534F\u8C03</p><p>\u534F\u8C03\u8FC7\u7A0B\u53EF\u4EE5\u5206\u4E3A render \u548C commit \u4E24\u4E2A\u9636\u6BB5</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">requestIdleCallback</span><span class="token punctuation">(</span>workloop<span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">workloop</span><span class="token punctuation">(</span><span class="token parameter">deadline</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// let shouldYield = false</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>nextUnitWork <span class="token operator">&amp;&amp;</span> deadline<span class="token punctuation">.</span><span class="token function">timeRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nextUnitWork <span class="token operator">=</span> <span class="token function">performUnitWork</span><span class="token punctuation">(</span>nextUnitWork<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">requestIdleCallback</span><span class="token punctuation">(</span>workloop<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="render" tabindex="-1"><a class="header-anchor" href="#render" aria-hidden="true">#</a> render</h2><p>render \u9636\u6BB5\u4E3B\u8981\u662F\u6E32\u67D3\u5B50\u5143\u7D20\uFF0C\u5E76\u6784\u5EFA Fiber \u6811\uFF1A</p><ol><li>\u5982\u679C\u6709 children \u5C31\u904D\u5386 children</li><li>\u7B2C\u4E00\u4E2A children \u4F5C\u4E3A\u5F53\u524D Fiber \u7684 child\uFF0C\u540E\u7EED\u7684 children \u4F5C\u4E3A\u7B2C\u4E00\u4E2A children \u7684 sibiling</li></ol><p><img src="`+a+`" alt="image"></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">INSERT</span> <span class="token operator">=</span> <span class="token string">&#39;insert&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">UPDATE</span> <span class="token operator">=</span> <span class="token string">&#39;update&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">DELETE</span> <span class="token operator">=</span> <span class="token string">&#39;delete&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">performUnitWork</span><span class="token punctuation">(</span><span class="token parameter">workInPrograss</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// beginWork(workInPrograss)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> workInPrograss<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">updateFunctionComponent</span><span class="token punctuation">(</span>workInPrograss<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">updateHostComponent</span><span class="token punctuation">(</span>workInPrograss<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>workInPrograss<span class="token punctuation">.</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> workInPrograss<span class="token punctuation">.</span>child
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> nextFiber <span class="token operator">=</span> workInPrograss
    <span class="token keyword">while</span> <span class="token punctuation">(</span>nextFiber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// completeWork(workInPrograss) \u6536\u96C6effect</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextFiber<span class="token punctuation">.</span>sibiling<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> nextFiber<span class="token punctuation">.</span>sibiling<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        nextFiber <span class="token operator">=</span> nextFiber<span class="token punctuation">.</span>return<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">updateFunctionComponent</span><span class="token punctuation">(</span><span class="token parameter">workInPrograss</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> props <span class="token punctuation">}</span> <span class="token operator">=</span> workInPrograss<span class="token punctuation">;</span>

    <span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">reconcilerChildren</span><span class="token punctuation">(</span>workInPrograss<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">updateHostComponent</span><span class="token punctuation">(</span><span class="token parameter">workInPrograss</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>workInPrograss<span class="token punctuation">.</span>stateNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        workInPrograss<span class="token punctuation">.</span>stateNode <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>workInPrograss<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">reconcilerChildren</span><span class="token punctuation">(</span>workInPrograss<span class="token punctuation">,</span> workInPrograss<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">reconcilerChildren</span><span class="token punctuation">(</span><span class="token parameter">workInPrograss<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>workInPrograss<span class="token punctuation">.</span>props <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> workInPrograss<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children <span class="token operator">!==</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> newChildren <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token operator">?</span> children <span class="token operator">:</span> <span class="token punctuation">[</span>children<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> preFiber <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// \u7B2C\u4E00\u4E2A\u8001\u7684\u5B50\u8282\u70B9</span>
    <span class="token keyword">let</span> oldFiber <span class="token operator">=</span> workInPrograss<span class="token punctuation">.</span>base <span class="token operator">&amp;&amp;</span> workInPrograss<span class="token punctuation">.</span>base<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
    newChildren<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> newFiber <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> same <span class="token operator">=</span> child <span class="token operator">&amp;&amp;</span> oldFiber <span class="token operator">&amp;&amp;</span> child<span class="token punctuation">.</span>type <span class="token operator">===</span> oldFiber<span class="token punctuation">.</span>type<span class="token punctuation">;</span>
        <span class="token comment">// \u65B0\u65E7 fiber \u76F8\u540C</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>same<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            newFiber <span class="token operator">=</span> <span class="token punctuation">{</span>
                type<span class="token operator">:</span> child<span class="token punctuation">.</span>type<span class="token punctuation">,</span>
                stateNode<span class="token operator">:</span> oldFiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">,</span>
                props<span class="token operator">:</span> child<span class="token punctuation">.</span>props<span class="token punctuation">,</span>
                child<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
                <span class="token keyword">return</span><span class="token operator">:</span> workInPrograss<span class="token punctuation">,</span>
                sibiling<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
                base<span class="token operator">:</span> oldFiber<span class="token punctuation">,</span>
                tag<span class="token operator">:</span> <span class="token constant">UPDATE</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u65B0\u589E\u63D2\u5165</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>same <span class="token operator">&amp;&amp;</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            newFiber <span class="token operator">=</span> <span class="token punctuation">{</span>
                type<span class="token operator">:</span> child<span class="token punctuation">.</span>type<span class="token punctuation">,</span>
                stateNode<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
                props<span class="token operator">:</span> child<span class="token punctuation">.</span>props<span class="token punctuation">,</span>
                child<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
                <span class="token keyword">return</span><span class="token operator">:</span> workInPrograss<span class="token punctuation">,</span>
                sibiling<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
                base<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
                tag<span class="token operator">:</span> <span class="token constant">INSERT</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u5220\u9664</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>same <span class="token operator">&amp;&amp;</span> oldFiber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            oldFiber<span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token constant">DELETE</span><span class="token punctuation">;</span>
            delations<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>oldFiber<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldFiber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            oldFiber <span class="token operator">=</span> oldFiber<span class="token punctuation">.</span>sibiling<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            workInPrograss<span class="token punctuation">.</span>child <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            preFiber<span class="token punctuation">.</span>sibiling <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        preFiber <span class="token operator">=</span> newFiber<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br></div></div><h3 id="\u6839\u636E-fiber-\u521B\u5EFA-dom-\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#\u6839\u636E-fiber-\u521B\u5EFA-dom-\u8282\u70B9" aria-hidden="true">#</a> \u6839\u636E Fiber \u521B\u5EFA dom \u8282\u70B9</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createNode</span><span class="token punctuation">(</span><span class="token parameter">fiber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> fiber<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    node <span class="token operator">&amp;&amp;</span> <span class="token function">updateNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> fiber<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">updateNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> oldProps<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>oldProps<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;children&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> props<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    node<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;on&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">const</span> eventName <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    node<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> oldProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> props<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        node<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;children&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> props<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">const</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    node<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;on&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">const</span> eventName <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> node<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> props<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">}</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h2 id="commit" tabindex="-1"><a class="header-anchor" href="#commit" aria-hidden="true">#</a> commit</h2><p>commit \u4ECE root \u5F00\u59CB\uFF0C\u6DF1\u5EA6\u4F18\u5148\u5C06 Fiber \u7684 stateNode \u63D2\u5165\u5230\u9875\u9762</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> currentRoot <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token keyword">function</span> <span class="token function">workloop</span><span class="token punctuation">(</span><span class="token parameter">deadline</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// other code</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nextUnitWork <span class="token operator">&amp;&amp;</span> wipRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// other code</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">commitWork</span><span class="token punctuation">(</span>wipRoot<span class="token punctuation">.</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    currentRoot <span class="token operator">=</span> wipRoot<span class="token punctuation">;</span>
    wipRoot <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">commitWork</span><span class="token punctuation">(</span><span class="token parameter">fiber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fiber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> parentFiber <span class="token operator">=</span> fiber<span class="token punctuation">.</span>return<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>parentFiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parentFiber <span class="token operator">=</span> parentFiber<span class="token punctuation">.</span>return<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> parentNode <span class="token operator">=</span> parentFiber<span class="token punctuation">.</span>stateNode
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token constant">INSERT</span> <span class="token operator">&amp;&amp;</span> fiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parentNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token constant">UPDATE</span> <span class="token operator">&amp;&amp;</span> fiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">updateNode</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">,</span> fiber<span class="token punctuation">.</span>base<span class="token punctuation">.</span>props<span class="token punctuation">,</span> fiber<span class="token punctuation">.</span>props<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token constant">DELETE</span> <span class="token operator">&amp;&amp;</span> fiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">commitDelation</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">commitWork</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">commitWork</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>sibiling<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">commitDelation</span><span class="token punctuation">(</span><span class="token parameter">workInPrograss<span class="token punctuation">,</span> parentNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>workInPrograss<span class="token punctuation">.</span>stateNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>workInPrograss<span class="token punctuation">.</span>stateNode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">commitDelation</span><span class="token punctuation">(</span>workInPrograss<span class="token punctuation">.</span>child<span class="token punctuation">,</span> parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h2 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks" aria-hidden="true">#</a> hooks</h2><p>\u5728 updateFunctionComponent \u65F6\uFF0C\u4F1A\u6267\u884C\u51FD\u6570\u7EC4\u4EF6\uFF0C\u6B64\u65F6 hook \u4F1A\u6267\u884C</p><p>\u8BBE\u7F6E\u4E00\u4E2A\u5168\u5C40\u6807\u5FD7 wipFiber \u4EE3\u8868 workInProgress\uFF0C\u5C31\u53EF\u4EE5\u62FF\u5230 Fiber \u4E0A\u4FDD\u5B58\u7684\u72B6\u6001</p><h3 id="usestate-usereducer" tabindex="-1"><a class="header-anchor" href="#usestate-usereducer" aria-hidden="true">#</a> useState &amp; useReducer</h3><p>useState \u662F useReducer \u7684\u7279\u6B8A\u5B9E\u73B0\uFF0C\u6709 2 \u4E2A\u529F\u80FD\uFF0C\u4E00\u662F\u8FD4\u56DE\u4E0A\u4E00\u6B21\u66F4\u65B0\u65F6\u7684\u72B6\u6001\uFF0C\u4E8C\u662F\u6539\u53D8 state \u5E76\u89E6\u53D1\u66F4\u65B0</p><p>\u6BCF\u6B21\u51FD\u6570\u7EC4\u4EF6\u66F4\u65B0\u90FD\u4F1A\u91CD\u65B0\u6267\u884C\u6240\u6709 hook\uFF0C\u6240\u4EE5\u5982\u679C\u7528\u6570\u7EC4\uFF08\u6E90\u7801\u662F\u94FE\u8868\uFF09\u4FDD\u5B58\u6BCF\u4E2A hook\uFF0C\u5982\u679C\u4F4D\u7F6E\u4E0D\u53D8\uFF0C\u5219\u6BCF\u6B21\u66F4\u65B0\u90FD\u53EF\u4EE5\u5F97\u5230\u4E0A\u6B21 hook \u8FD4\u56DE\u7684\u72B6\u6001</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> wipFiber <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">updateFunctionComponent</span><span class="token punctuation">(</span><span class="token parameter">workInPrograss</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// other code</span>
    wipFiber <span class="token operator">=</span> workInPrograss<span class="token punctuation">;</span>
    wipFiber<span class="token punctuation">.</span>hooks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    wipFiber<span class="token punctuation">.</span>hooksIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// other code</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">useReducer</span><span class="token punctuation">(</span><span class="token parameter">reducer<span class="token punctuation">,</span> initialArg<span class="token punctuation">,</span> init</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> oldHook <span class="token operator">=</span> wipFiber<span class="token punctuation">.</span>base <span class="token operator">&amp;&amp;</span> wipFiber<span class="token punctuation">.</span>base<span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>wipFiber<span class="token punctuation">.</span>hooksIndex<span class="token punctuation">]</span>
    <span class="token keyword">const</span> initialAction <span class="token operator">=</span> <span class="token string">&#39;infint&#39;</span>
    <span class="token keyword">const</span> initialState <span class="token operator">=</span> 
        <span class="token operator">!</span><span class="token operator">!</span>init <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> init <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> 
            <span class="token operator">?</span> <span class="token function">init</span><span class="token punctuation">(</span>initialArg<span class="token punctuation">)</span> 
            <span class="token operator">:</span> initialArg  
    <span class="token keyword">const</span> hook <span class="token operator">=</span> oldHook 
        <span class="token operator">?</span> <span class="token punctuation">{</span>
            state<span class="token operator">:</span> oldHook<span class="token punctuation">.</span>state<span class="token punctuation">,</span>
            queue<span class="token operator">:</span> oldHook<span class="token punctuation">.</span>queue
          <span class="token punctuation">}</span> 
        <span class="token operator">:</span> <span class="token punctuation">{</span>
            state<span class="token operator">:</span> initialState<span class="token punctuation">,</span>
            queue<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
          <span class="token punctuation">}</span>

    hook<span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">action</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        hook<span class="token punctuation">.</span>state <span class="token operator">=</span> action
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    wipFiber<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>hook<span class="token punctuation">)</span>
    wipFiber<span class="token punctuation">.</span>hooksIndex<span class="token operator">++</span>

    <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> oldState <span class="token operator">=</span> hook<span class="token punctuation">.</span>state
        <span class="token keyword">const</span> newState <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>oldState<span class="token punctuation">,</span> action<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>newState<span class="token punctuation">,</span> oldState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            hook<span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span>
            <span class="token comment">// \u4ECE\u6839\u8282\u70B9\u5F00\u59CB\u66F4\u65B0</span>
            wipRoot <span class="token operator">=</span> <span class="token punctuation">{</span>
                stateNode<span class="token operator">:</span> currentRoot<span class="token punctuation">.</span>stateNode<span class="token punctuation">,</span>
                props<span class="token operator">:</span> currentRoot<span class="token punctuation">.</span>props<span class="token punctuation">,</span>
                base<span class="token operator">:</span> currentRoot
            <span class="token punctuation">}</span>
            nextUnitWork <span class="token operator">=</span> wipRoot<span class="token punctuation">;</span>
            delations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>hook<span class="token punctuation">.</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">useReducer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> action<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><h3 id="usememo-usecallback" tabindex="-1"><a class="header-anchor" href="#usememo-usecallback" aria-hidden="true">#</a> useMemo &amp; useCallback</h3><p>useMemo \u5728\u4F9D\u8D56\u9879\u6539\u53D8\u65F6\u91CD\u65B0\u8BA1\u7B97\u5E76\u8FD4\u56DE\u53C2\u6570 fn \u7684\u7ED3\u679C\uFF0CuseCallback \u662F useMemo \u7684\u7279\u6B8A\u60C5\u51B5</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> deps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> oldHook <span class="token operator">=</span> wipFiber<span class="token punctuation">.</span>base <span class="token operator">&amp;&amp;</span> wipFiber<span class="token punctuation">.</span>base<span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>wipFiber<span class="token punctuation">.</span>hooksIndex<span class="token punctuation">]</span>
    <span class="token keyword">let</span> result
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldHook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> deps<span class="token operator">:</span> oldDeps <span class="token punctuation">}</span> <span class="token operator">=</span> oldHook
        <span class="token keyword">const</span> same <span class="token operator">=</span> oldDeps<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">===</span> deps<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>same<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            wipFiber<span class="token punctuation">.</span>base<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>value<span class="token operator">:</span> result<span class="token punctuation">,</span> deps<span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        wipFiber<span class="token punctuation">.</span>hooksIndex<span class="token operator">++</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        wipFiber<span class="token punctuation">.</span>base<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>value<span class="token operator">:</span> result<span class="token punctuation">,</span> deps<span class="token punctuation">}</span><span class="token punctuation">)</span>
        wipFiber<span class="token punctuation">.</span>hooksIndex<span class="token operator">++</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> deps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fn<span class="token punctuation">,</span> deps<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="useeffect" tabindex="-1"><a class="header-anchor" href="#useeffect" aria-hidden="true">#</a> useEffect</h3><p>useEffect \u662F\u5728\u66F4\u65B0 DOM \u540E\u6267\u884C\uFF0C\u5373\u5728 commit \u9636\u6BB5\u6267\u884C\uFF0C\u6267\u884C\u65F6\u4F1A\u5148\u6E05\u7406\u6240\u6709 useEffect \u7684\u9500\u6BC1\u51FD\u6570\uFF0C\u518D\u6267\u884C\u56DE\u8C03\u51FD\u6570</p><p>\u5148\u7528 setTimeout \u6A21\u62DF\u4E00\u4E0B\u66F4\u65B0\u540E</p><ul><li>Attention\uFF1A\u6B64\u5904\u662F\u7B80\u5355\u5B9E\u73B0\uFF0C\u4E0D\u662F\u6E90\u7801</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token parameter">cb<span class="token punctuation">,</span> deps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> oldHook <span class="token operator">=</span> wipFiber<span class="token punctuation">.</span>base <span class="token operator">&amp;&amp;</span> wipFiber<span class="token punctuation">.</span>base<span class="token punctuation">.</span>hooks<span class="token punctuation">[</span>wipFiber<span class="token punctuation">.</span>hooksIndex<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldHook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">[</span>destory<span class="token punctuation">,</span> oldDeps<span class="token punctuation">]</span> <span class="token operator">=</span> oldHook
        <span class="token keyword">const</span> same <span class="token operator">=</span> deps<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">===</span> oldDeps<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>same<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            destory <span class="token operator">&amp;&amp;</span> <span class="token function">destory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                oldHook <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deps<span class="token punctuation">]</span>
                wipFiber<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>oldHook<span class="token punctuation">)</span>
                
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        wipFiber<span class="token punctuation">.</span>hooksIndex<span class="token operator">++</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            oldHook <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deps<span class="token punctuation">]</span>
            wipFiber<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>oldHook<span class="token punctuation">)</span>
            wipFiber<span class="token punctuation">.</span>hooksIndex<span class="token operator">++</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>`,35);function e(o,c){return t}var r=s(p,[["render",e]]);export{r as default};
