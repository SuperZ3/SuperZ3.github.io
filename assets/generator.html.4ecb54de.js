import{c as n}from"./app.9dca4400.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="generator" tabindex="-1"><a class="header-anchor" href="#generator" aria-hidden="true">#</a> Generator</h1><p>Generator \u51FD\u6570\u63D0\u4F9B\u4E86\u4E00\u79CD\u5F02\u6B65\u7F16\u7A0B\u89E3\u51B3\u65B9\u6848\uFF0C\u53EF\u4EE5\u8BA9\u6211\u4EEC\u50CF\u5199\u540C\u6B65\u4EE3\u7801\u4E00\u6837\u7EC4\u7EC7\u4EE3\u7801\uFF0C\u6211\u4EEC\u5148\u4ECE\u57FA\u672C\u4F7F\u7528\u5F00\u59CB\uFF0C\u518D\u7814\u7A76\u4E0B\u5982\u4F55\u5B9E\u73B0 Generator \u7684\u673A\u5236</p><h2 id="\u8FED\u4EE3\u5668" tabindex="-1"><a class="header-anchor" href="#\u8FED\u4EE3\u5668" aria-hidden="true">#</a> \u8FED\u4EE3\u5668</h2><p>\u8FED\u4EE3\u5668\u662F\u4E00\u4E2A\u7EDF\u4E00\u7684\u63A5\u53E3\uFF0C\u53EF\u4EE5\u88AB <code>for...of</code>\u3001<code>...</code> \u7B49\u91C7\u7528\u6765\u5B9E\u73B0\u904D\u5386\u64CD\u4F5C\uFF0C\u53EF\u4EE5\u7B80\u5355\u5B9E\u73B0\u4E3A\u8FD4\u56DE\u6709 next \u65B9\u6CD5\u5BF9\u8C61\u7684\u51FD\u6570\uFF0C\u51E1\u662F\u90E8\u7F72\u4E86 Symbol.iterator \u5C5E\u6027\u7684\u5BF9\u8C61\u90FD\u53EF\u4EE5\u89C6\u4E3A\u53EF\u904D\u5386\u5BF9\u8C61</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> done <span class="token operator">=</span> count <span class="token operator">&gt;</span> <span class="token number">5</span>
                <span class="token keyword">return</span> <span class="token punctuation">{</span>
                    done<span class="token punctuation">,</span>
                    value<span class="token operator">:</span> done <span class="token operator">?</span> count <span class="token operator">:</span> count<span class="token operator">++</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>o<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [0,1,2,3,4,5]</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="\u57FA\u672C\u4F7F\u7528" tabindex="-1"><a class="header-anchor" href="#\u57FA\u672C\u4F7F\u7528" aria-hidden="true">#</a> \u57FA\u672C\u4F7F\u7528</h2><p>\u5F53\u8C03\u7528 Generator \u51FD\u6570\u65F6\uFF0C\u8FD4\u56DE\u4E00\u4E2A\u8FED\u4EE3\u5668\u3002\u8C03\u7528\u8FED\u4EE3\u5668\u7684 next \u65B9\u6CD5\u5373\u5F00\u59CB\u51FD\u6570\u7684\u6267\u884C\u8FC7\u7A0B\u76F4\u5230\u9047\u5230 yield \u6216 return \u64CD\u4F5C\u7B26\uFF0C\u6B64\u65F6\u4F1A\u8FD4\u56DE\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u5BF9\u8C61\u7684 value \u662F yield \u540E\u8868\u8FBE\u5F0F\u7684\u503C\u3002\u5F53\u518D\u6B21\u8C03\u7528 next \u65B9\u6CD5\u65F6\uFF0C\u4F1A\u4ECE\u4E0A\u6B21\u51FD\u6570\u6682\u505C\u7684\u5730\u65B9\u6062\u590D\u6267\u884C\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token string">&#39;hello&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">yield</span> <span class="token string">&#39;something&#39;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token string">&#39;still&#39;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">yield</span> <span class="token string">&#39;continue&#39;</span>
    <span class="token keyword">return</span> <span class="token string">&#39;world&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> g <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token comment">// { value: &#39;hello&#39;, done: false }</span>
g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// A</span>
<span class="token comment">// { value: &#39;something&#39;, done: false }</span>
g<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&#39;WRONG&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// WRONG</span>
<span class="token comment">// { value: &#39;still&#39;, done: false }</span>
g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// { value: &#39;continue, done: false }</span>
g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// { value: &#39;world&#39;, done: true}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>\u6709\u4E86 Generator\uFF0C\u6211\u4EEC\u53EF\u4EE5\u5199\u51FA\u6BD4\u56DE\u8C03\u51FD\u6570\u548C Promise \u66F4\u4F18\u96C5\u7684\u5F02\u6B65\u4EE3\u7801</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> readFile <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// \u56DE\u8C03\u5F0F</span>
<span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> data1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;test2.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> data2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data1 <span class="token operator">+</span> data2<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// Promise</span>
<span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>data <span class="token operator">+=</span> data<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&#39;test2.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> data <span class="token operator">+=</span> data<span class="token punctuation">)</span>

<span class="token comment">// Generator</span>
<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;test2.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d <span class="token operator">+</span> value<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> g <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>\u6B64\u5904\u867D\u7136\u6CA1\u6709\u6446\u8131\u5BF9\u56DE\u8C03\u7684\u4F9D\u8D56\uFF0C\u4F46\u662F\u5C06\u5D4C\u5957\u7684\u903B\u8F91\u62C6\u6210\u4E86\u987A\u5E8F\u7684\u903B\u8F91\uFF0C\u66F4\u65B9\u4FBF\u7406\u89E3\u3002\u4F46\u662F\u624B\u52A8\u6267\u884C next \u7565\u663E\u7E41\u7410\uFF0C\u53EF\u4EE5\u501F\u52A9 co \u5E93\u5B9E\u73B0\u81EA\u52A8\u6267\u884C</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">co</span><span class="token punctuation">(</span><span class="token parameter">gen</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> gen <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> gen <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>gen <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> gen<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span>

        <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">function</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> res <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>

            <span class="token function">next</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">function</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> ret
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                ret <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token function">next</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">function</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
            <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">toPromise</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> v<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> <span class="token function">isPromise</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token string">&#39;need Promise&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h2 id="generator-\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#generator-\u5B9E\u73B0" aria-hidden="true">#</a> Generator \u5B9E\u73B0</h2><p>\u8003\u8651\u6211\u4EEC\u81EA\u5B9A\u4E49 Generator \u9700\u8981\u5B9E\u73B0\u7684\u4E00\u4E9B\u529F\u80FD\uFF1A</p><ol><li><p>\u9700\u8981\u8FD4\u56DE\u4E00\u4E2A\u8FED\u4EE3\u5668\uFF0C\u8C03\u7528\u8FED\u4EE3\u5668\u4F1A\u5728\u51FD\u6570\u4E0A\u6B21\u6682\u505C\u7684\u5730\u65B9\u5F00\u59CB\u6267\u884C</p></li><li><p>\u9700\u8981\u4E00\u4E2A\u5168\u5C40\u7684 context \u6765\u4FDD\u5B58\u72B6\u6001\uFF0C\u5B9E\u73B0\u51FD\u6570\u5185\u5916\u90E8\u7684\u6570\u636E\u4EA4\u6362\uFF0C\u7531\u4E8E Generator \u53EF\u91CD\u590D\u8C03\u7528\uFF0C\u6BCF\u6B21\u8C03\u7528\u4EA7\u751F\u7684\u8FED\u4EE3\u5668\u5F7C\u6B64\u72EC\u7ACB\uFF0C\u6240\u4EE5 context \u5BF9\u4E8E\u6BCF\u6B21\u6267\u884C\uFF0C\u8981\u6709\u4E2A\u72EC\u7ACB\u7684\u5B9E\u4F8B</p></li><li><p>\u9700\u8981\u4E00\u4E2A switch case \u7ED3\u6784\uFF0C\u6839\u636E\u8C03\u7528 next \u65F6\u4F20\u5165\u7684\u6807\u5FD7\uFF0C\u51B3\u5B9A\u4ECE\u54EA\u4E2A\u4F4D\u7F6E\u5F00\u59CB\u6267\u884C</p></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token string">&#39;result1&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token keyword">yield</span> <span class="token string">&#39;result2&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span>
    sign<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    value<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    message<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    done<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">wrapFn</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> _context <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            _context<span class="token punctuation">.</span>message <span class="token operator">=</span> m
            <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>_context<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                value<span class="token punctuation">,</span>
                done<span class="token operator">:</span> _context<span class="token punctuation">.</span>done
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a
    <span class="token keyword">return</span> <span class="token function">wrapFn</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">innerGen</span><span class="token punctuation">(</span><span class="token parameter">_context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>_context<span class="token punctuation">.</span>sign<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
                _context<span class="token punctuation">.</span>sign <span class="token operator">=</span> <span class="token number">1</span>
                <span class="token keyword">return</span> <span class="token string">&#39;result1&#39;</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
                _context<span class="token punctuation">.</span>sign <span class="token operator">=</span> <span class="token number">2</span>
                a <span class="token operator">=</span> _context<span class="token punctuation">.</span>message
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_context<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token string">&#39;result2&#39;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token string">&#39;end&#39;</span><span class="token operator">:</span>
                <span class="token keyword">return</span> _context<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><ol><li><p>\u9996\u5148\uFF0C\u6211\u4EEC\u5C06 Generator \u8F6C\u6362\u6210 innerGen \u51FD\u6570\u7684\u5F62\u5F0F\uFF0C\u5C06 yield \u7528 switch case \u7ED3\u6784\u66FF\u6362</p></li><li><p>\u5F53\u8C03\u7528 next \u65F6\uFF0C\u5373\u662F\u91CD\u65B0\u6267\u884C innerGen \u7684\u8FC7\u7A0B</p></li><li><p>\u7528 _context.sign \u6807\u5FD7\u51FD\u6570\u6267\u884C\u7684\u4F4D\u7F6E</p></li><li><p>\u5F53\u6709\u6570\u636E\u4F20\u5165\u65F6\uFF0C\u7528 _context.message \u4FDD\u5B58</p></li></ol><p>\u8FD9\u6837\uFF0C\u5C31\u6A21\u62DF\u4E86 Generator \u7684\u6267\u884C\u8FC7\u7A0B</p><h2 id="async-\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#async-\u5B9E\u73B0" aria-hidden="true">#</a> Async \u5B9E\u73B0</h2><p>\u4E86\u89E3\u4E86 Generator \u7684\u6267\u884C\u8FC7\u7A0B\uFF0C\u6211\u4EEC\u5728\u8003\u8651\u4E0B Async \u7684\u5B9E\u73B0\uFF0CAsync \u53EF\u4EE5\u7406\u89E3\u4E3A\u5E26\u6709\u81EA\u52A8\u6267\u884C\u5668\u7684 Generator\uFF0C\u6267\u884C Async \u8FD4\u56DE\u4E00\u4E2A Promise\uFF0C\u4F1A\u7B49\u5F85 Async \u5185\u90E8\u6240\u6709 await \u6267\u884C\u540E\uFF0C\u624D\u4F1A\u53D8\u6210 fulfilled \u6216 rejected \u72B6\u6001</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter">gen</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> g
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            g <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>g <span class="token operator">||</span> <span class="token keyword">typeof</span> g<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>

        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        <span class="token keyword">function</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
                Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">_v</span> <span class="token operator">=&gt;</span> <span class="token function">next</span><span class="token punctuation">(</span>_v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token parameter">_r</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>_r<span class="token punctuation">)</span><span class="token punctuation">)</span> 
            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
                <span class="token keyword">return</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div>`,21);function t(e,o){return p}var u=s(a,[["render",t]]);export{u as default};
