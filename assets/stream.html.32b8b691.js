import{c as n}from"./app.9dca4400.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="stream" tabindex="-1"><a class="header-anchor" href="#stream" aria-hidden="true">#</a> Stream</h1><p>Stream \u7C7B\u63D0\u4F9B\u4E86\u5BF9\u6D41\uFF08\u5B57\u8282\u6D41\uFF09\u6570\u636E\u7684\u5904\u7406\u64CD\u4F5C\uFF0C\u6709 4 \u79CD\u57FA\u672C\u7C7B\u578B\uFF1A\u53EF\u8BFB\u6D41\u3001\u53EF\u5199\u6D41\u3001\u8F6C\u6362\u6D41\u3001\u53CC\u5DE5\u6D41</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Stream <span class="token operator">=</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;internal/streams/legacy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Stream<span class="token punctuation">;</span>
Stream<span class="token punctuation">.</span>Readable <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;internal/streams/readable&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Stream<span class="token punctuation">.</span>Writable <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;internal/streams/writable&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Stream<span class="token punctuation">.</span>Duplex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;internal/streams/duplex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Stream<span class="token punctuation">.</span>Transform <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;internal/streams/transform&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Stream \u57FA\u7C7B\u7EE7\u627F\u4E86 events \u7C7B</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">EE</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Stream</span><span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token constant">EE</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">ObjectSetPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Stream</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token class-name">EE</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ObjectSetPrototypeOf</span><span class="token punctuation">(</span>Stream<span class="token punctuation">,</span> <span class="token constant">EE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Stream \u57FA\u7C7B\u5B9A\u4E49\u4E86 pipe \u65B9\u6CD5\uFF0C\u7528\u4E8E\u5C06\u53EF\u8BFB\u6D41\u8BFB\u53D6\u7684\u6570\u636E\u53D1\u9001\u5230\u53EF\u5199\u6D41\u4E2D</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// dest \u4EE3\u8868\u53EF\u5199\u6D41</span>
<span class="token comment">// options: { end: true }\uFF0C\u8BFB\u53D6\u7ED3\u675F\u65F6\u7ED3\u675F\u5199\u5165</span>
<span class="token class-name">Stream</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pipe</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">dest<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">ondata</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u53EF\u5199\u6D41\u7F13\u51B2\u533A\u5199\u6EE1\uFF0C\u6682\u505C\u8BFB\u53D6</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>dest<span class="token punctuation">.</span>writable <span class="token operator">&amp;&amp;</span> dest<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> source<span class="token punctuation">.</span>pause<span class="token punctuation">)</span> 
          source<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">ondrain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u53EF\u5199\u6D41\u7F13\u51B2\u533A\u6E05\u7A7A\uFF0C\u7EE7\u7EED\u8BFB\u53D6</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span>readable <span class="token operator">&amp;&amp;</span> source<span class="token punctuation">.</span>resume<span class="token punctuation">)</span>
          source<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    source<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> ondata<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dest<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;drain&#39;</span><span class="token punctuation">,</span> ondrain<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// dest._isStdio \u662F true \u8868\u793A\u76EE\u7684\u6D41\u662F\u6807\u51C6\u8F93\u51FA\u6216\u6807\u51C6\u9519\u8BEF\uFF08\u89C1 process/stdio.js\uFF09</span>
    <span class="token comment">// \u53EF\u8BFB\u6D41\u89E6\u53D1 end\u3001close \u4E8B\u4EF6\u65F6\uFF0C\u5173\u95ED\u53EF\u5199\u6D41</span>
    <span class="token keyword">let</span> didOnEnd <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">onend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>didOnEnd<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
      didOnEnd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      dest<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">onclose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>didOnEnd<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
      didOnEnd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> dest<span class="token punctuation">.</span>destroy <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> dest<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dest<span class="token punctuation">.</span>_isStdio <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>options <span class="token operator">||</span> options<span class="token punctuation">.</span>end <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      source<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> onend<span class="token punctuation">)</span><span class="token punctuation">;</span>
      source<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> onclose<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">onerror</span><span class="token punctuation">(</span><span class="token parameter">er</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">EE</span><span class="token punctuation">.</span><span class="token function">listenerCount</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> er<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u4E3A\u53EF\u8BFB\u6D41\u3001\u53EF\u5199\u6D41\u6CE8\u518C error \u4E8B\u4EF6\uFF0C\u6E05\u9664\u4E0A\u9762\u6DFB\u52A0\u7684\u4E8B\u4EF6</span>
    <span class="token function">prependListener</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> onerror<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">prependListener</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> onerror<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      source<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> ondata<span class="token punctuation">)</span><span class="token punctuation">;</span>
      dest<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">&#39;drain&#39;</span><span class="token punctuation">,</span> ondrain<span class="token punctuation">)</span><span class="token punctuation">;</span>

      source<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> onend<span class="token punctuation">)</span><span class="token punctuation">;</span>
      source<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> onclose<span class="token punctuation">)</span><span class="token punctuation">;</span>

      source<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> onerror<span class="token punctuation">)</span><span class="token punctuation">;</span>
      dest<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> onerror<span class="token punctuation">)</span><span class="token punctuation">;</span>

      source<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> cleanup<span class="token punctuation">)</span><span class="token punctuation">;</span>
      source<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> cleanup<span class="token punctuation">)</span><span class="token punctuation">;</span>

      dest<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> cleanup<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    source<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> cleanup<span class="token punctuation">)</span><span class="token punctuation">;</span>
    source<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> cleanup<span class="token punctuation">)</span><span class="token punctuation">;</span>

    dest<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> cleanup<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u5C06 dest \u6DFB\u52A0\u5230\u53EF\u8BFB\u6D41\u76EE\u6807\u65F6\uFF0C\u4F20\u5165\u6E90</span>
    dest<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;pipe&#39;</span><span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \u94FE\u5F0F\u8C03\u7528</span>
    <span class="token keyword">return</span> dest<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br></div></div><h2 id="_1-\u53EF\u8BFB\u6D41" tabindex="-1"><a class="header-anchor" href="#_1-\u53EF\u8BFB\u6D41" aria-hidden="true">#</a> 1. \u53EF\u8BFB\u6D41</h2><p>\u53EF\u8BFB\u6D41\u662F\u6D41\u6570\u636E\u7684\u6765\u6E90\uFF0C\u6240\u6709\u53EF\u8BFB\u6D41\u90FD\u7EE7\u627F\u4E86 stream.Readable \u7C7B</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">ObjectSetPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Readable</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ObjectSetPrototypeOf</span><span class="token punctuation">(</span>Readable<span class="token punctuation">,</span> Stream<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*
  options: {
      highWaterMark: Number,
      read: Function, // stream._read() \u65B9\u6CD5\u7684\u5B9E\u73B0
      destory: Function, // stream.distory() \u65B9\u6CD5\u7684\u5B9E\u73B0
      construct: Function, // stream._construct() \u65B9\u6CD5\u7684\u5B9E\u73B0
      signal: AbortSignal, // \u8868\u793A\u53EF\u80FD\u53D6\u6D88\u7684\u4FE1\u53F7\u3002
  }
*/</span>
<span class="token keyword">function</span> <span class="token function">Readable</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Readable</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Readable</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// \u68C0\u6D4B\u662F\u5426\u662F\u53CC\u5DE5\u6D41</span>
  <span class="token keyword">const</span> isDuplex <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Stream<span class="token punctuation">.</span>Duplex</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>_readableState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReadableState</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> isDuplex<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> options<span class="token punctuation">.</span>read <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_read <span class="token operator">=</span> options<span class="token punctuation">.</span>read<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> options<span class="token punctuation">.</span>destroy <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_destroy <span class="token operator">=</span> options<span class="token punctuation">.</span>destroy<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> options<span class="token punctuation">.</span>construct <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_construct <span class="token operator">=</span> options<span class="token punctuation">.</span>construct<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">Stream</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>Readable \u5B9A\u4E49\u4E86 _readableState \u5C5E\u6027\uFF0C\u5E76\u4ECE options \u4E2D\u62FF\u5230 _read\u3001_destroy \u65B9\u6CD5\uFF0CReadableState \u5982\u4E0B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ReadableState</span><span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> stream<span class="token punctuation">,</span> isDuplex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u662F\u5426\u53CC\u5DE5\u6D41</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> isDuplex <span class="token operator">!==</span> <span class="token string">&#39;boolean&#39;</span><span class="token punctuation">)</span>
    isDuplex <span class="token operator">=</span> stream <span class="token keyword">instanceof</span> <span class="token class-name">Stream<span class="token punctuation">.</span>Duplex</span><span class="token punctuation">;</span>
  <span class="token comment">// \u662F\u5426\u5F00\u542F\u4E86\u5BF9\u8C61\u6A21\u5F0F</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>objectMode <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>objectMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u5BF9\u53CC\u5DE5\u6D41\uFF0C\u8BBE\u7F6E\u8BFB\u7AEF\u6A21\u5F0F</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isDuplex<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>objectMode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>objectMode <span class="token operator">||</span>
      <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>readableObjectMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u6BCF\u6B21\u4ECE\u53EF\u8BFB\u6D41\u4E2D\u8BFB\u53D6\u7684\u6570\u636E\u91CF\uFF0C\u9ED8\u8BA4 16 \u5B57\u8282\uFF0C\u5BF9\u8C61\u6A21\u5F0F\u9ED8\u8BA4 16 \u4E2A</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>highWaterMark <span class="token operator">=</span> options <span class="token operator">?</span>
    <span class="token function">getHighWaterMark</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token string">&#39;readableHighWaterMark&#39;</span><span class="token punctuation">,</span> isDuplex<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">getDefaultHighWaterMark</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u8BFB\u53D6\u7684\u6570\u636E\u5B58\u50A8\u7684\u5730\u65B9</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// \u6D41\u6709\u6D41\u52A8\u6A21\u5F0F\u3001\u6682\u505C\u6A21\u5F0F</span>
  <span class="token comment">// null \u8868\u793A\u672A\u5F00\u59CB\u6D41\u52A8\uFF0C\u4E0D\u4EA7\u751F\u6570\u636E</span>
  <span class="token comment">// true \u8868\u793A\u6B63\u5728\u6D41\u52A8\uFF0C\u5E94\u8BE5\u751F\u6210\u6570\u636E\u5E76\u89E6\u53D1\u5BF9\u5E94\u4E8B\u4EF6</span>
  <span class="token comment">// false \u8868\u793A\u505C\u6B62\u6D41\u52A8\uFF0C\u4F46\u4ECD\u7136\u4EA7\u751F\u6570\u636E</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>flowing <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// \u6D41\u662F\u5426\u5DF2\u7ECF\u7ED3\u675F  </span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>ended <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token comment">// \u662F\u5426\u89E6\u53D1\u8FC7 end \u4E8B\u4EF6\u4E86 </span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>endEmitted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token comment">// \u662F\u5426\u6B63\u5728\u8BFB\u53D6\u6570\u636E</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>reading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token comment">// &#39;data&#39;\u3001&#39;readable&#39; \u4E8B\u4EF6\u662F\u5426\u7ACB\u5373\u6267\u884C\uFF0Cfalse \u4E3A\u7ACB\u5373\u6267\u884C</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token comment">// \u662F\u5426\u9700\u8981\u8BFB\u53D6\u6570\u636E</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>needReadable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token comment">// \u662F\u5426\u89E6\u53D1\u4E86 readable \u4E8B\u4EF6  </span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>emittedReadable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token comment">// \u662F\u5426\u76D1\u542C\u4E86 readable \u4E8B\u4EF6 </span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>readableListening <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token comment">// \u662F\u5426\u6B63\u5728\u6267\u884C resume \u7684\u8FC7\u7A0B  </span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>resumeScheduled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token comment">// \u662F\u5426\u5DF2\u7ECF\u89E6\u53D1\u4E86 error \u4E8B\u4EF6</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>errorEmitted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token comment">// \u9500\u6BC1\u4E00\u4E2A\u6D41\u65F6\uFF0C\u89E6\u53D1 close \u4E8B\u4EF6</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>emitClose <span class="token operator">=</span> <span class="token operator">!</span>options <span class="token operator">||</span> options<span class="token punctuation">.</span>emitClose <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token comment">// \u6D41\u8BFB\u53D6\u7ED3\u675F\uFF0C\u6267\u884C\u9500\u6BC1</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>autoDestroy <span class="token operator">=</span> <span class="token operator">!</span>options <span class="token operator">||</span> options<span class="token punctuation">.</span>autoDestroy <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token comment">// \u6D41\u662F\u5426\u5DF2\u7ECF\u9500\u6BC1</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>destroyed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token comment">// \u6570\u636E\u7F16\u7801\u683C\u5F0F</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>defaultEncoding <span class="token operator">=</span> <span class="token punctuation">(</span>options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>defaultEncoding<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">;</span>
  <span class="token comment">// \u6570\u636E\u7F16\u7801\u5668\uFF0C\u7528\u4E8E String \u548C Buffer \u6570\u636E\u8F6C\u6362</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>decoder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>encoding <span class="token operator">=</span> options<span class="token punctuation">.</span>encoding<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><h3 id="_1-1-readable\u3001data-\u4E8B\u4EF6" tabindex="-1"><a class="header-anchor" href="#_1-1-readable\u3001data-\u4E8B\u4EF6" aria-hidden="true">#</a> 1.1 readable\u3001data \u4E8B\u4EF6</h3><p>readable \u548C data \u4E8B\u4EF6\u90FD\u5C5E\u4E8E\u6D88\u8D39\u6570\u636E\u7684\u65B9\u5F0F\uFF0C\u5B9E\u9645\u4F7F\u7528\u4E00\u79CD\u5373\u53EF\uFF0C\u540C\u65F6\u4F7F\u7528\u65F6\uFF0C\u4EE5 readable \u4E8B\u4EF6\u4E3A\u4E3B\uFF1A</p><ul><li><p>\u6DFB\u52A0 readable \u4E8B\u4EF6\u4F1A\u5C06 flowing = false\uFF0C\u540C\u65F6\u4E0D\u65AD\u7684\u89E6\u53D1 readable \u4E8B\u4EF6\uFF0C\u56DE\u8C03\u51FD\u6570\u5185\u8C03\u7528 read() \u8BFB\u53D6\u5230\u6570\u636E\u65F6\uFF0C\u4F1A\u89E6\u53D1 data \u4E8B\u4EF6</p></li><li><p>\u6DFB\u52A0 data \u4E8B\u4EF6\u540C\u65F6 flowing !== false \u4E14 flowing !== true \u65F6\uFF0C\u4EE4 flowing = !readableListening\uFF0C\u5373\u6839\u636E\u662F\u5426\u6DFB\u52A0\u4E86 readable\uFF0C\u51B3\u5B9A\u662F\u5426\u5F00\u59CB\u6D41\u52A8</p></li></ul><p>\u6CE8\u610F\uFF0Creadable \u4E8B\u4EF6\u4E0D\u540C\u4E8E data \u4E8B\u4EF6\uFF0C\u53EA\u5728\u7B2C\u4E00\u6B21\u6DFB\u52A0\u6570\u636E\u5230\u7F13\u5B58\u533A\u548C\u5168\u90E8\u6DFB\u52A0\u5230\u7F13\u5B58\u533A\u540E\u89E6\u53D1</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Readable</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">on</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ev<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> ev<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_readableState<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>ev <span class="token operator">===</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>readableListening <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listenerCount</span><span class="token punctuation">(</span><span class="token string">&#39;readable&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// \u6DFB\u52A0 data \u4E8B\u4EF6\u65F6\uFF1A</span>
    <span class="token comment">// 1. flowing === false\uFF0C\u8BF4\u660E\u6D41\u6682\u505C\u6D41\u52A8\uFF0C\u4F46\u662F\u4F1A\u7EE7\u7EED\u4EA7\u751F\u6570\u636E\u5230\u7F13\u5B58\u533A\uFF0C\u7B49\u5F85 read \u6216 push \u65B9\u6CD5\u8C03\u7528 data \u4E8B\u4EF6\u89E6\u53D1\u540E\u7EED\u52A8\u4F5C</span>
    <span class="token comment">// 2. flowing === true\uFF0C\u8BF4\u660E\u6B63\u5728\u6D41\u52A8\u5F53\u4E2D\uFF0C\u4EC0\u4E48\u90FD\u4E0D\u7528\u4E0D\u505A\uFF0C\u7B49\u5F85\u5176\u5B83\u65B9\u6CD5\u89E6\u53D1 data \u4E8B\u4EF6\u5373\u53EF</span>
    <span class="token comment">// 3. flowing === null\uFF0C\u8BF4\u660E\u672A\u5F00\u59CB\u6D41\u52A8\uFF0C\u4EE4 flowing = !readableListening\uFF0C\u5728 nextTick \u4E2D\u8C03\u7528 read \u65B9\u6CD5</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>flowing <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ev <span class="token operator">===</span> <span class="token string">&#39;readable&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span>endEmitted <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>readableListening<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>readableListening <span class="token operator">=</span> state<span class="token punctuation">.</span>needReadable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      state<span class="token punctuation">.</span>flowing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      state<span class="token punctuation">.</span>emittedReadable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">emitReadable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span>reading<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5F00\u59CB\u8BFB\u53D6\u6570\u636E</span>
        process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span>nReadingNextTick<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">nReadingNextTick</span><span class="token punctuation">(</span><span class="token parameter">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  self<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">emitReadable</span><span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> stream<span class="token punctuation">.</span>_readableState<span class="token punctuation">;</span>
  state<span class="token punctuation">.</span>needReadable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span>emittedReadable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>emittedReadable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span>emitReadable_<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">emitReadable_</span><span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> stream<span class="token punctuation">.</span>_readableState<span class="token punctuation">;</span>
  <span class="token comment">// \u6D41\u6CA1\u6709\u88AB\u9500\u6BC1\uFF0C\u4EA7\u751F\u4E86\u6570\u636E\u6216\u8005\u8BFB\u5B8C\u4E86\uFF0C\u89E6\u53D1 readable \u4E8B\u4EF6</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span>destroyed <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>errored <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>length <span class="token operator">||</span> state<span class="token punctuation">.</span>ended<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stream<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;readable&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    state<span class="token punctuation">.</span>emittedReadable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u975E\u6D41\u52A8\u6A21\u5F0F\uFF0C\u6CA1\u6709\u8BFB\u5B8C\u5E76\u4E14\u5DF2\u7ECF\u8BFB\u5230\u7684\u6570\u636E\u91CF\u5C0F\u4E8E highWaterMark\uFF0C\u9700\u8981\u518D\u6B21\u89E6\u53D1 readable \u4E8B\u4EF6</span>
  state<span class="token punctuation">.</span>needReadable <span class="token operator">=</span>
    <span class="token operator">!</span>state<span class="token punctuation">.</span>flowing <span class="token operator">&amp;&amp;</span>
    <span class="token operator">!</span>state<span class="token punctuation">.</span>ended <span class="token operator">&amp;&amp;</span>
    state<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> state<span class="token punctuation">.</span>highWaterMark<span class="token punctuation">;</span>
  <span class="token function">flow</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">flow</span><span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> stream<span class="token punctuation">.</span>_readableState<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>flowing <span class="token operator">&amp;&amp;</span> stream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><h3 id="_1-2-push-\u6DFB\u52A0\u6570\u636E" tabindex="-1"><a class="header-anchor" href="#_1-2-push-\u6DFB\u52A0\u6570\u636E" aria-hidden="true">#</a> 1.2 push \u6DFB\u52A0\u6570\u636E</h3><p>\u8BFB\u53D6\u6570\u636E\u7684\u524D\u63D0\u662F\u5728 Readable._read() \u4E2D\u7528 push \u6DFB\u52A0\u6570\u636E\u5230\u7F13\u5B58\u533A\uFF08BufferList\uFF09\u4E2D</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Readable</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">chunk<span class="token punctuation">,</span> encoding</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">readableAddChunk</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> chunk<span class="token punctuation">,</span> encoding<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">readableAddChunk</span><span class="token punctuation">(</span><span class="token parameter">stream<span class="token punctuation">,</span> chunk<span class="token punctuation">,</span> encoding<span class="token punctuation">,</span> addToFront</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> stream<span class="token punctuation">.</span>_readableState<span class="token punctuation">;</span>
  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>chunk <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>reading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token comment">// \u89E6\u53D1 readable \u4E8B\u4EF6</span>
      <span class="token function">onEofChunk</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>objectMode <span class="token operator">||</span> <span class="token punctuation">(</span>chunk <span class="token operator">&amp;&amp;</span> chunk<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>reading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token function">addChunk</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> state<span class="token punctuation">,</span> chunk<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>addToFront<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>reading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token function">maybeReadMore</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token comment">// \u662F\u5426\u53EF\u4EE5\u6DFB\u52A0\u66F4\u591A\u6570\u636E</span>
    <span class="token keyword">return</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>ended <span class="token operator">&amp;&amp;</span>
      <span class="token punctuation">(</span>state<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>highWaterMark <span class="token operator">||</span> state<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">addChunk</span><span class="token punctuation">(</span><span class="token parameter">stream<span class="token punctuation">,</span> state<span class="token punctuation">,</span> chunk<span class="token punctuation">,</span> addToFront</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>flowing <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>sync <span class="token operator">&amp;&amp;</span>
      stream<span class="token punctuation">.</span><span class="token function">listenerCount</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u6D41\u52A8\u6A21\u5F0F\uFF0C\u6CA1\u6709\u7F13\u5B58\u7684\u6570\u636E\uFF0C\u7ACB\u5373\u89E6\u53D1 data \u4E8B\u4EF6</span>
    state<span class="token punctuation">.</span>dataEmitted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    stream<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5C06\u6570\u636E\u63A8\u5165\u7F13\u5B58\u533A</span>
    state<span class="token punctuation">.</span>length <span class="token operator">+=</span> state<span class="token punctuation">.</span>objectMode <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> chunk<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>addToFront<span class="token punctuation">)</span>
      state<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      state<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u89E6\u53D1 readable \u4E8B\u4EF6</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>needReadable<span class="token punctuation">)</span>
      <span class="token function">emitReadable</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">maybeReadMore</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">maybeReadMore</span><span class="token punctuation">(</span><span class="token parameter">stream<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span>readingMore <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span>constructed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>readingMore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span>maybeReadMore_<span class="token punctuation">,</span> stream<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">maybeReadMore_</span><span class="token punctuation">(</span><span class="token parameter">stream<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u8BFB\u53D6\u7684\u6570\u636E\u5C0F\u4E8E highWaterMark </span>
  <span class="token comment">// \u6216\u8005\uFF0C\u6D41\u52A8\u6A21\u5F0F\u4E14\u5C1A\u672A\u8BFB\u53D6\u6570\u636E</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span>reading <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>ended <span class="token operator">&amp;&amp;</span>
         <span class="token punctuation">(</span>state<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>highWaterMark <span class="token operator">||</span>
          <span class="token punctuation">(</span>state<span class="token punctuation">.</span>flowing <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> len <span class="token operator">=</span> state<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token comment">// \u5F00\u59CB\u8BFB\u53D6\u7F13\u5B58\u533A\u5185\u5BB9</span>
    stream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">===</span> state<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  state<span class="token punctuation">.</span>readingMore <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br></div></div><p>push \u6839\u636E\u6761\u4EF6\u9009\u62E9\u7ACB\u5373\u89E6\u53D1 data \u4E8B\u4EF6\uFF0C\u8FD8\u662F\u5C06\u6570\u636E\u63A8\u5165\u7F13\u5B58\u533A\uFF0C\u5982\u679C\u6CA1\u5230 highWaterMark \u5219\u7EE7\u7EED\u8BFB\u53D6\u66F4\u591A\u6570\u636E</p><h3 id="_1-3-read-\u8BFB\u53D6\u6570\u636E" tabindex="-1"><a class="header-anchor" href="#_1-3-read-\u8BFB\u53D6\u6570\u636E" aria-hidden="true">#</a> 1.3 read \u8BFB\u53D6\u6570\u636E</h3><p>read \u7684\u4F5C\u7528\uFF1A</p><ol><li><p>\u8BFB\u53D6\u7F13\u5B58\u533A\u7684\u6570\u636E\uFF0C\u8FD4\u56DE\u7ED9\u7528\u6237</p></li><li><p>\u8C03\u7528\u7528\u6237\u5B9A\u4E49\u7684 _read \u65B9\u6CD5</p></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Readable</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">read</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_readableState<span class="token punctuation">;</span>
  <span class="token keyword">const</span> nOrig <span class="token operator">=</span> n<span class="token punctuation">;</span>

  n <span class="token operator">=</span> <span class="token function">howMuchToRead</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// \u8BFB\u5B8C\u4E86\uFF0C\u7ED3\u675F</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span>ended<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token function">endReadable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> doRead <span class="token operator">=</span> state<span class="token punctuation">.</span>needReadable<span class="token punctuation">;</span>

  <span class="token comment">// \u5982\u679C\u7F13\u5B58\u533A\u6570\u636E\u5C0F\u4E8E highWaterMark\uFF0C\u9700\u8981\u89E6\u53D1 radable \u4E8B\u4EF6</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> state<span class="token punctuation">.</span>length <span class="token operator">-</span> n <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>highWaterMark<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doRead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>ended <span class="token operator">||</span> state<span class="token punctuation">.</span>reading <span class="token operator">||</span> state<span class="token punctuation">.</span>destroyed <span class="token operator">||</span> state<span class="token punctuation">.</span>errored <span class="token operator">||</span>
      <span class="token operator">!</span>state<span class="token punctuation">.</span>constructed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doRead <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>doRead<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>reading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    state<span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">// \u5F53\u524D\u7F13\u5B58\u533A\u4E3A\u7A7A\uFF0C\u9700\u8981\u89E6\u53D1 readable \u4E8B\u4EF6</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
      state<span class="token punctuation">.</span>needReadable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token comment">// \u8C03\u7528\u6211\u4EEC\u5B9A\u4E49\u7684 _read \u65B9\u6CD5</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_read</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>highWaterMark<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">errorOrDestroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    state<span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// \u91CD\u65B0\u8BA1\u7B97 n \u7684\u5927\u5C0F\uFF0C\u56E0\u4E3A\u4E0A\u9762\u7684 _read \u65B9\u6CD5\u4F1A\u8C03\u7528 push \u5F80\u7F13\u5B58\u533A\u63A8\u5165\u66F4\u591A\u6570\u636E</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span>reading<span class="token punctuation">)</span>
      n <span class="token operator">=</span> <span class="token function">howMuchToRead</span><span class="token punctuation">(</span>nOrig<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> ret<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> 
    <span class="token comment">// \u4ECE\u7F13\u5B58\u533A\u62FF\u5230\u6570\u636E</span>
    ret <span class="token operator">=</span> <span class="token function">fromList</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    ret <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token comment">// \u89E6\u53D1 data \u4E8B\u4EF6</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>errorEmitted <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>closeEmitted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>dataEmitted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><h3 id="_1-3-pipe-\u8FDE\u63A5\u53EF\u8BFB\u53EF\u5199\u6D41" tabindex="-1"><a class="header-anchor" href="#_1-3-pipe-\u8FDE\u63A5\u53EF\u8BFB\u53EF\u5199\u6D41" aria-hidden="true">#</a> 1.3 pipe \u8FDE\u63A5\u53EF\u8BFB\u53EF\u5199\u6D41</h3><p>pipe \u63D0\u4F9B\u4E86\u4E00\u79CD\u81EA\u52A8\u7BA1\u7406\u6D41\u7684\u65B9\u5F0F\uFF0C\u4E0D\u65AD\u7684\u5C06\u53EF\u8BFB\u6D41\u8BFB\u53D6\u5230\u7684\u6570\u636E\u5199\u5165\u53EF\u5199\u6D41\u4E2D\u3002\u7531\u4E0B\u9762\u4EE3\u7801\u53EF\u4EE5\u770B\u5230\uFF1A</p><ol><li><p>pipe \u7528 data \u4E8B\u4EF6\u5F00\u59CB\u53EF\u8BFB\u6D41\u7684\u6D41\u52A8</p></li><li><p>\u5F53\u53EF\u5199\u6D41\u65E0\u6CD5\u7EE7\u7EED\u5199\u5165\u65F6\uFF0C\u5C31\u6682\u505C\u6D41\u52A8\uFF0C\u540C\u65F6\u6CE8\u518C\u53EF\u5199\u6D41 drain \u4E8B\u4EF6\u5904\u7406\u51FD\u6570</p></li><li><p>\u5F53\u53EF\u5199\u6D41\u53EF\u4EE5\u7EE7\u7EED\u5199\u5165\u65F6\uFF0C\u7528 resume \u6062\u590D\u8BFB\u53D6</p></li></ol><p>\u8FD9\u91CC\u53EA\u7B5B\u9009\u4E86\u4E3B\u8981\u7684\u903B\u8F91\uFF0C\u539F\u4EE3\u7801\u4E0D\u5B8C\u5168\u7B49\u540C\u4E8E stream.pipe \u65B9\u6CD5</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Readable</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pipe</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">dest<span class="token punctuation">,</span> pipeOpts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> src <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_readableState<span class="token punctuation">;</span>

  state<span class="token punctuation">.</span>pipes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> ondrain<span class="token punctuation">;</span>
  <span class="token comment">// \u5F00\u59CB\u6D41\u52A8</span>
  src<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> ondata<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">ondata</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ret <span class="token operator">=</span> dest<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// cleanUp\uFF1A\u6E05\u9664 dest \u7684 finish\u3001drain\u3001close\u7B49\uFF0C\u6E05\u9664 source \u7684 data\u3001end \u7B49</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cleanedUp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      src<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ondrain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ondrain <span class="token operator">=</span> <span class="token function">pipeOnDrain</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span>
      dest<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;drain&#39;</span><span class="token punctuation">,</span> ondrain<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>dest<span class="token punctuation">.</span>writableNeedDrain <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>flowing<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span>flowing<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5982\u679C\u6CA1\u6709\u5F00\u59CB\uFF0C\u5728\u8FD9\u91CC\u5F00\u59CB</span>
    src<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> dest<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">pipeOnDrain</span><span class="token punctuation">(</span><span class="token parameter">src<span class="token punctuation">,</span> dest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">pipeOnDrainFunctionResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> src<span class="token punctuation">.</span>_readableState<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">listenerCount</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      src<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p>// TODO writable</p>`,31);function t(e,o){return p}var u=s(a,[["render",t]]);export{u as default};
